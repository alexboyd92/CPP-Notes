<?xml version="1.0" ?>
<cherrytree>
	<bookmarks list="6"/>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Intro" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588689397.15" ts_lastsave="1588690775.61" unique_id="1">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="What is C++?" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588689492.6" ts_lastsave="1588789384.35" unique_id="2">
			<rich_text>Self deffinition: C with objects
Instructior deffinition: Programing language primary used for  programs that are demand speed and performance
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Why" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588689610.9" ts_lastsave="1588690090.08" unique_id="3">
			<rich_text>Used in variety of feilds 
Data science 
Has a lot of features
Can be used high level or low level 

</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Where" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588689685.69" ts_lastsave="1588689710.13" unique_id="4">
				<rich_text>Cameras,telecsopes,networking,games,finace,cars
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Book rec" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588690028.09" ts_lastsave="1588691687.74" unique_id="6">
			<rich_text>
</rich_text>
			<rich_text scale="h3">The C++ Programming Language: 4th Edition</rich_text>
			<rich_text> *(probably what i need)
Programing Principles and practice using C++ (novice)
Effective Modern C++
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Program Structure" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588690190.9" ts_lastsave="1588692393.0" unique_id="7">
		<rich_text>Two parts preproccessor and main



 #include &lt;iostream&gt; ← preprocessor 

  int main() 
 {
      std::cout &lt;&lt; &quot;Hello world, I am ready for C++&quot;;
      return 0;
  }
</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Preprocessor directives" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588690359.27" ts_lastsave="1588690391.78" unique_id="8">
			<rich_text>
Any line with # is a preprocer
#include &lt;Iostream&gt;    
brackets say look in the directory where the standard libraries are kept 
“” mean look in current directory then in standard libraries </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Main" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588690404.11" ts_lastsave="1588691231.19" unique_id="9">
			<rich_text>Main body of code is a function like other langugages
main function has to return something so usualy int. Probably 0 1 like normal for success/fail
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Compile" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588692398.88" ts_lastsave="1588692819.78" unique_id="21">
			<rich_text>g++ main.ccp -o main.out
g++ is compiler
main.ccp filename
-o outputflag like c 
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Syntax" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588690592.65" ts_lastsave="1589158407.28" unique_id="10">
		<rich_text>
Basic notes on diffrences in Syntax </rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="I/O" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588692214.87" ts_lastsave="1588696986.38" unique_id="18">
			<rich_text>


</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Printing" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588696826.15" ts_lastsave="1588696942.6" unique_id="35">
				<rich_text foreground="#ffff00000000" scale="h2" weight="heavy">Printing to the console</rich_text>
				<rich_text>
#include &lt;iostream&gt;
std::cout &lt;&lt;&quot;Hello world&quot;; ← semicolons return 
std says that it is from standard library cout is function
String literals must be in “”
numbers dont need to be
variable names dont need to be in “”

concatenation
int number =23
std::cout &lt;&lt; “The number is”&quot;&lt;&lt;number
 cout does not insert newline us /n or &lt;&lt;endl

</rich_text>
				<rich_text weight="heavy">Formating prints</rich_text>
				<rich_text>
 there are some standard formats like /n for newline or /t for tab
 
 there is also iomanip that allows you to do more powerfull manipulations 
 
</rich_text>
				<rich_text scale="h2" weight="heavy"> </rich_text>
				<rich_text weight="heavy">Printing to a file</rich_text>
				<rich_text>
 include fstream library
 - Include the &lt;fstream&gt; library 
 - Create a stream (input, output, both)
      - ofstream myfile; (for writing to a file)
      - ifstream myfile; (for reading a file)
      - fstream myfile; (for reading and writing a file)
 - Open the file  myfile.open(“filename”);
 - Write or read the file
 - Close the file myfile.close();
 </rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Printing to file" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588696942.6" ts_lastsave="1588696953.47" unique_id="38">
					<rich_text>include fstream library
 - Include the &lt;fstream&gt; library 
 - Create a stream (input, output, both)
      - ofstream myfile; (for writing to a file)
      - ifstream myfile; (for reading a file)
      - fstream myfile; (for reading and writing a file)
 - Open the file  myfile.open(“filename”);
 - Write or read the file
 - Close the file myfile.close();</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Printing to console" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588696936.13" ts_lastsave="1588699199.07" unique_id="37">
					<rich_text foreground="#ffff00000000" scale="h2" weight="heavy">Printing to the console</rich_text>
					<rich_text>
#include &lt;iostream&gt;
std::cout &lt;&lt;&quot;Hello world&quot;; ← semicolons return 
std says that it is from standard library cout is function
String literals must be in “”
numbers dont need to be
variable names dont need to be in “”

concatenation
int number =23
std::cout &lt;&lt; “The number is”&quot;&lt;&lt;number
 cout does not insert newline us /n or &lt;&lt;endl

</rich_text>
					<rich_text weight="heavy">Formating prints</rich_text>
					<rich_text>
 there are some standard formats like /n for newline or /t for tab
 
 there is also iomanip that allows you to do more powerfull manipulations </rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="iomanip" prog_lang="cpp" readonly="False" tags="" ts_creation="1588694875.61" ts_lastsave="1588694876.7" unique_id="29">
						<rich_text> #include &lt;iomanip&gt;

std::cout&lt;&lt;&quot;\n\nThe text without any formating\n&quot;;
std::cout&lt;&lt;&quot;Ints&quot;&lt;&lt;&quot;Floats&quot;&lt;&lt;&quot;Doubles&quot;&lt;&lt; &quot;\n&quot;;
std::cout&lt;&lt;&quot;\nThe text with setw(15)\n&quot;;
std::cout&lt;&lt;&quot;Ints&quot;&lt;&lt;std::setw(15)&lt;&lt;&quot;Floats&quot;&lt;&lt;std::setw(15)&lt;&lt;&quot;Doubles&quot;&lt;&lt; &quot;\n&quot;;
std::cout&lt;&lt;&quot;\n\nThe text with tabs\n&quot;;
std::cout&lt;&lt;&quot;Ints\t&quot;&lt;&lt;&quot;Floats\t&quot;&lt;&lt;&quot;Doubles&quot;&lt;&lt; &quot;\n&quot;;</rich_text>
					</node>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Input" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588696839.66" ts_lastsave="1588789439.96" unique_id="36">
				<rich_text> 
 
</rich_text>
				<rich_text scale="h2">Input From Console</rich_text>
				<rich_text>
 use std::cin
 </rich_text>
				<rich_text foreground="#ffff00000000">Warning</rich_text>
				<rich_text> strings are weird if you put a space they will think its the end of the line 
 use std::getline(std::cin,variablename);
use stringstream to convert from string to another datatype
the include is #include&lt;sstream&gt;</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="sstream" prog_lang="cpp" readonly="False" tags="" ts_creation="1588696742.75" ts_lastsave="1588696753.39" unique_id="31">
					<rich_text> #include &lt;iostream&gt;
 #include &lt;string&gt;
 #include &lt;sstream&gt;

 int main ()
 {
   std::string stringLength;
   float inches = 0;
   float yardage = 0;

   std::cout &lt;&lt; &quot;Enter number of inches: &quot;;
   std::getline (std::cin,stringLength);
   std::stringstream(stringLength) &gt;&gt; inches;
   std::cout&lt;&lt;&quot;You entered &quot;&lt;&lt;inches&lt;&lt;&quot;\n&quot;;
   yardage = inches/36;
   std::cout &lt;&lt; &quot;Yardage is &quot; &lt;&lt; yardage;
   return 0;
 }</rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Comments" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588692268.3" ts_lastsave="1588692926.74" unique_id="19">
			<rich_text>Comments 
single line 
// like this 
multi line /* 
like 
this
*/</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="constants" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588694421.14" ts_lastsave="1588694425.71" unique_id="24">
			<rich_text>Like other programing languages constants cant be changed
const int outputGoal =100;</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="enum" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588694515.03" ts_lastsave="1588694586.43" unique_id="25">
				<rich_text>Type of constant
enum type_name { value1,value2,value3,} object_names
used for months
 enum MONTH {Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec};</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Headderfiles" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588695767.15" ts_lastsave="1588695768.77" unique_id="30">
			<rich_text>Similar to c  but instead of .h it should be .hpp (basicly says headerfile plus plus)</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Math" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588797724.8" ts_lastsave="1588797726.1" unique_id="39">
			<rich_text>Same as c
can cast ints to float to make sure float math is correct
need to include cmath for power and PI 

also has 
quick assignment opperators
</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
</rich_text>
			<encoded_png char_offset="147"></encoded_png>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Pointers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589157694.25" ts_lastsave="1589157695.46" unique_id="40">
			<rich_text>
Derefrence with *
like c
int * pointerToA =&amp;a;
std::cout&lt;&lt;*pointerToA  will print the information at the pointer location
&amp; works like c too 
so stdLLcout&lt;&lt;&amp;a would print the adress of the variable a</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Arrays" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589158407.28" ts_lastsave="1589158414.89" unique_id="41">
		<rich_text>similar to c
variableType arrayName [] ={contents of array}
or
varriableType arrayname[arraySize]
to get information
arrayName[index number]
multi dimensional array is similar</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Sytle" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691231.19" ts_lastsave="1588691960.0" unique_id="11">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Naming" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691249.74" ts_lastsave="1588692900.33" unique_id="12">
			<rich_text>Namespace   under_scored
Class names CammelCase
function    cammelCase]
Paramaters/locats under_scored 
Member variables under_score_trailing_    # prefix is reserved so use trailing underscore to 
Enums CamelCase
Globasl g_under_score  # Why are you ussing globas
Constants UPPER_CASE
File name  Match case of class name in file
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="HeaderFiles" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691473.77" ts_lastsave="1588691481.14" unique_id="13">
			<rich_text>Use #ifdef to protect against multiple inclusions
#ifndef msr_airsm_Myheadder_hpp  
#define msr_airsm_Myheadder_hpp  
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Brackets" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691558.88" ts_lastsave="1588691740.47" unique_id="14">
			<rich_text>

Inside function or method body place curly bracket on same line. Outside that the Namespace, Class and methods levels use separate
line. This is called </rich_text>
			<rich_text link="webs https://en.wikipedia.org/wiki/Indent_style#K.26R_style">K&amp;R style</rich_text>
			<rich_text>  and its variants are widely used in C++ vs other styles which are more  popular in other languages. Notice
that curlies are not required if you have single statement, but  complex statements are easier to keep correct with the braces.



Example 
</rich_text>
			<rich_text justification="left"></rich_text>
			<encoded_png char_offset="412"></encoded_png>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Const and References" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691938.08" ts_lastsave="1588693465.46" unique_id="15">
			<rich_text>

Religiously review all non-scalar parameters you declare to be  candidate for const and references. If you are coming from languages  such as C#/Java/Python, the most often mistake you would make is to pass parameters by value  instead of const T&amp;; Especially most of the strings,
vectors and maps you want to pass as const T&amp;; (if they are readonly) or T&amp; (if they are writable). Also add const suffix to methods as much as possible.
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Overiding" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691960.0" ts_lastsave="1588691960.49" unique_id="16">
			<rich_text>
</rich_text>
			<rich_text scale="h2">Overriding</rich_text>
			<rich_text>
When overriding virtual method, use override suffix.
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Pointers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588691968.14" ts_lastsave="1588693405.92" unique_id="17">
			<rich_text>

This is really about memory management.  A simulator has much  performance critical code, so we try and avoid overloading the memory  manager with lots of calls to new/delete.  We also want to avoid too much  copying of things on the stack, so we pass things by reference
whenever  possible. But when the object really needs to live longer than the call stack you  often need to allocate that object on the heap, and so you have a pointer.  Now, if management of the lifetime  of that object is going to be tricky we recommend using C++ 11 smart pointers.
But smart pointers do have a cost, so don’t use them blindly everywhere.   For private code where performance is paramount, raw pointers can be used.  Raw pointers  are also often needed when interfacing with legacy systems that only accept pointer types, for example, sockets
API.  But we try to  wrap those legacy interfaces as much as possible and avoid that style of programming from leaking into  the larger code base.


Religiously check if you can use const everywhere, for example, const float * const xP. Avoid using prefix or suffix to indicate pointer
types in variable names, i.e. use my_obj instead of myobj_ptr except in cases where it might make sense to differentiate variables better,
for example, int mynum = 5; int* mynum_ptr = mynum;
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Namespace" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588692926.74" ts_lastsave="1588693329.24" unique_id="22">
		<rich_text>Way to avoid having to  use 
std::cout
probably other namespaces aswell
example code

#include &lt;iostream&gt;
 using namespace std;
 int main()
 {
 cout  &lt;&lt; “Hello World”;
 return 0;
 }
</rich_text>
		<rich_text scale="h1" weight="heavy">This is controversial because in large programs could be confusing </rich_text>
	</node>
</cherrytree>
